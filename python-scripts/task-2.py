# Data normalization using Sklearn...


import numpy as np
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import scale
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split


data = pd.read_csv("/report.csv", na_values = "/")
simpleImputerMedian = SimpleImputer(strategy = "median")                                                                                               # Creating imputers for handling NaN values...
simpleImputerMean = SimpleImputer(strategy = "mean")             
minMaxScaler = MinMaxScaler()                                                                              				  # Creating MinMax scaler...

data["Ispit1"] = simpleImputerMedian.fit_transform(data["Ispit1"].values.reshape(-1, 1))                    		  # Replacing NaN values with "median" strategy...
data["Ispit2"] = simpleImputerMedian.fit_transform(data["Ispit2"].values.reshape(-1, 1))
data["Ispit1_popravni"] = simpleImputerMean.fit_transform(data["Ispit1_popravni"].values.reshape(-1, 1))   	  # Replacing NaN values with "mean" strategy...
data["Ispit2_popravni"] = simpleImputerMean.fit_transform(data["Ispit2_popravni"].values.reshape(-1, 1))

data["Ispit1"] = scale(data["Ispit1"])                                                                      				  # Normalizing values using Z-score normalization...
data["Ispit2"] = scale(data["Ispit2"])
data["Ispit1_popravni"] = minMaxScaler.fit_transform(data["Ispit1_popravni"].values.reshape(-1, 1))         		  # Normalizing values using MinMax scaler...
data["Ispit2_popravni"] = minMaxScaler.fit_transform(data["Ispit2_popravni"].values.reshape(-1, 1))       

data.replace(np.nan, 0, inplace = True)                                                                     				  # Other NaN values will be 0...

grades = data["Ocjena"]
data.drop(columns = ["Ocjena"], inplace = True)                                                             				  # Deleting column with grades...

gradesNumPyArray = grades.to_numpy()                                                                        				  # Converting DataFrame object to NumPy array...
dataNumPyArray = data.to_numpy()

xTrain, xTest, yTrain, yTest = train_test_split(dataNumPyArray, gradesNumPyArray, test_size = 0.2)          		  # Preparing for classification training...